{"version":3,"file":"static/js/672.aaef9454.chunk.js","mappings":"kJACA,MAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAA+K,wB,6BCc/K,EAXmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,iBAAKC,UAAS,UAAKC,EAAW,IAAMA,GAAW,WAC3C,gBAAKC,IAAI,GAAGC,IAAI,4EAChB,SAAC,KAAO,CAACC,GAAIN,EAAK,SAAED,EAAMQ,SAGtC,ECkBA,EA5BgB,SAACR,GAWb,OACI,0BACI,yBACKA,EAAMS,WAYvB,E,uCCsBMC,GAAmBC,EAAAA,EAAAA,GAAU,CAC/BC,KAAM,WADeD,EAbD,SAACX,GACrB,OAAO,+BACH,kBAAMa,SAAUb,EAAMc,aAAa,WAC/B,0BACI,SAACC,EAAA,EAAK,CAACC,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,KAAMZ,KAAM,iBAAkBa,YAAa,0BAEjH,0BACI,4BAAQ,eAIxB,IAMA,EA/CgB,SAACrB,GACb,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAiBF,EAAMG,QACtBC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACnB,KAAMmB,EAAEnB,KAAiBN,GAAIyB,EAAEzB,IAAZyB,EAAEzB,GAAgB,IAE3D0B,EAAkBN,EAAMO,SACvBH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAErB,SAAcqB,EAAE5B,GAAM,IAMxD,OACI,iBAAKC,UAAWC,EAAU,WACtB,gBAAKD,UAAWC,EAAe,SAC1BoB,KAEL,iBAAKrB,UAAWC,EAAW,WACvB,yBACKwB,KAEL,0BACI,SAAClB,EAAgB,CAACG,SAdf,SAACkB,GAChB/B,EAAMgC,WAAWD,EAAOE,eAC5B,WAiBJ,E,8BChBA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAEyB,SAACa,GACtB,MAAO,CACHJ,WAAY,SAACC,GACTG,GAASC,EAAAA,EAAAA,GAAkBJ,GAC/B,EAER,IAIIK,EAAAA,EAFJ,CAGEC,E,kJCnBEC,EAA6B,SAAClB,GAAK,MAAM,CACzCmB,OAAQnB,EAAMoB,KAAKD,OACtB,EAEYH,EAAmB,SAACK,GAAe,IACtCC,EAAiB,qGAgBlB,OAhBkB,8BACnB,WACI,OAAKC,KAAK7C,MAAMyC,QAaT,SAACE,GAAS,UAAKE,KAAK7C,SAbI,SAAC,KAAQ,CAACO,GAAG,UAchD,KAAC,EAhBkB,CAASuC,EAAAA,WAqBhC,OAFqCX,EAAAA,EAAAA,IAAQK,EAARL,CAAoCS,EAG7E,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/AuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__0u6iR\",\"dialogsItems\":\"Dialogs_dialogsItems__GV-jz\",\"active\":\"Dialogs_active__P0ct1\",\"messages\":\"Dialogs_messages__1T2Rk\",\"dialog\":\"Dialogs_dialog__tyV0R\"};","import s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={`${s.dialog + ' ' + s.active}`}>\r\n            <img alt='' src=\"https://www.journaldugeek.com/content/uploads/2022/06/sans-titre19.jpg\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\n// import { addMessageCreator, updateNewMessageTextCreator } from \"../../../redux/state\";\r\n\r\nconst Message = (props) => {\r\n\r\n    // let addMessage = () => {\r\n    //     props.dispatch( addMessageCreator() )\r\n    // }\r\n\r\n    // let onMessageChange = (e) => {\r\n    //     let text = e.target.value\r\n    //     props.dispatch( updateNewMessageTextCreator(text) )\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            {/* <div>\r\n                <div>\r\n                    <textarea onChange={onMessageChange} value={props.newMessageText} ></textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addMessage}>Add message</button>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport { TextArea } from '../Common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators';\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messageElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id} />)\r\n\r\n    const addMessage = (values) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messageElements}\r\n                </div>\r\n                <div>\r\n                    <AddPostReduxForm onSubmit={addMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ReduxDialogForm = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} validate={[required, maxLengthCreator(30)]} name={'newMessageText'} placeholder={'Enter your message'} />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm({\r\n    form: 'message'\r\n})(ReduxDialogForm)\r\n\r\nexport default Dialogs;","import Dialogs from './Dialogs'\r\nimport { addMessageCreator } from '../../redux/dialogReducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText) => {\r\n            dispatch(addMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n            // const isAuthUser = async (props) => {\r\n            //     await props.setAuthUser()\r\n          \r\n          \r\n            //     if (!props.isAuth) {\r\n            //       return <Navigate to='/login' />\r\n            //     }\r\n            //   }\r\n          \r\n            //   isAuthUser()\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n"],"names":["props","path","id","className","s","alt","src","to","name","message","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","maxLengthCreator","placeholder","state","dialogsPage","dialogElements","dialogs","map","d","messageElements","messages","m","values","addMessage","newMessageText","compose","connect","dispatch","addMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}